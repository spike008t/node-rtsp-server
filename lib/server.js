// Generated by CoffeeScript 1.6.2
var colors, dgram, http, net, root, server, util;

util = require('util');

dgram = require('dgram');

net = require('net');

http = require('http');

colors = require('colors');

root = typeof exports !== "undefined" && exports !== null ? exports : this;

server = (function() {
  function server(port) {
    if (typeof port === 'string') {
      this.port = parseInt(port, 10);
    }
    this.port = port || 554;
    this.address = '0.0.0.0';
    this.init();
  }

  server.prototype.init = function() {
    return this.socket = null;
  };

  server.prototype.start = function(socketType) {
    var _this = this;

    this.socket = net.createServer(function(c) {
      _this.listening();
      c.on('end', _this.close.bind(_this));
      c.on('connection', function(sock) {});
      return c.on('data', _this.onData.bind(_this));
    });
    return this.socket.listen(this.port, this.listening.bind(this));
  };

  server.prototype.onData = function(buff) {
    var buffStr, line, lines, words, _i, _len;

    buffStr = buff.toString();
    console.log('----- REQUEST START -----');
    console.log(buffStr);
    console.log('----- REQUEST END -----');
    lines = buffStr.split(/\r?\n/);
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      console.log('line - ' + line);
    }
    words = lines[0].split(' ');
    switch (words[0]) {
      case "OPTIONS":
        return this.onRequestOptions();
      default:
        return console.log('Request ' + words[0] + ' not supported');
    }
  };

  server.prototype.onRequestOptions = function() {
    return console.log('Options request');
  };

  server.prototype.onRequestDescribe = function() {};

  server.prototype.parseRequest = function(msg, rinfo) {
    return console.log('[event][msg]'.green + ' - RTSP server got message ' + msg);
  };

  server.prototype.listening = function() {
    return console.log('[event][listen]'.yellow + ' - RTSP server listening on ' + this.socket.address().address + ':' + this.port);
  };

  server.prototype.close = function() {
    return console.log('[event][close]'.yellow + ' - RTSP server close');
  };

  server.prototype.error = function(ex) {
    return console.log('[event][error]'.red + ' - ' + util.inspect(ex));
  };

  return server;

})();

root.server = server;

root.createServer = function() {
  return new server();
};
